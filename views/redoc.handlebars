<!DOCTYPE html>
<html>

<head>
  <title>{{ data.title }}</title>
  <!-- needed for adaptive design -->
  <meta charset="utf-8" />
  {{#if data.favicon}}
  <link rel="shortcut icon" type="image/x-icon" href="{{ data.favicon }}" />
  {{/if}}
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">
  <!--
    ReDoc doesn't change outer page styles
    -->
  <style>
    body {
      margin: 0;
      padding: 0;
    }
  </style>

  <style>
    #version-selector {
      margin: 0 20px;
      padding: 4px 8px;
      border-radius: 3px;
      border-color: #b4b4b4;
    }
  </style>

  <style>
    {{{ data.css }}}
  </style>
</head>

<body>
  <!-- we provide is specification here -->
  <div id="redoc_container"></div>
  <script src="https://cdn.jsdelivr.net/npm/redoc@{{data.redocVersion}}/bundles/redoc.standalone.js"> </script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/redoc-try-it-out/dist/try-it-out.min.js"></script>
  <script>
    function waitForElm(selector) {
      return new Promise(resolve => {
          if (document.querySelector(selector)) {
              return resolve(document.querySelector(selector));
          }

          const observer = new MutationObserver(mutations => {
              if (document.querySelector(selector)) {
                  observer.disconnect();
                  resolve(document.querySelector(selector));
              }
          });

          observer.observe(document.body, {
              childList: true,
              subtree: true
          });
      });
    }

    let themeJSON = '{{{ toJSON data.theme }}}';
    if (themeJSON === '') { themeJSON = undefined }

    RedocTryItOut.init(
      '{{ data.docUrl }}',
      {
        ...JSON.parse('{{{ toJSON data.options }}}'),
        ...(themeJSON && {
          theme: {
            ...JSON.parse(themeJSON)
          }
        })
      },
      document.getElementById("redoc_container")
    );

    const versions = '{{{ toJSON data.apiVersions }}}';
    const versionList = JSON.parse(versions === '' ? [] : versions);

    waitForElm('div[role="search"]').then(searchBar => {
      if (versionList.length > 0) {
        const selector = document.createElement('select');
        selector.id = 'version-selector';

        versionList.forEach((version, index) => {
          const versionOption = document.createElement('option');
          versionOption.value = version.name;
          versionOption.selected = version.active ? 'selected' : ''; 
          
          if (versionList.length - 1 === index) {
            versionOption.innerText = `${version.name} - latest`;
          } else {
            versionOption.innerText = version.name;
          }
          
          selector.appendChild(versionOption);
        })

        selector.onchange = function() {
          const activeItem = versionList.find(x => x.name === this.value);
          document.location.href = activeItem?.href;
        }

        searchBar.parentNode.insertBefore(selector, searchBar);
      }
    })
  </script>
</body>

</html>
