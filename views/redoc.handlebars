<!DOCTYPE html>
<html>

<head>
  <title>{{ data.title }}</title>
  <!-- needed for adaptive design -->
  <meta charset="utf-8" />
  {{#if data.favicon}}
  <link rel="shortcut icon" type="image/x-icon" href="{{ data.favicon }}" />
  {{/if}}
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

  <!--
    ReDoc doesn't change outer page styles
    -->
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    * {
      font-family: Inter;
    }
  </style>

  <style>
    #version-selector {
      margin: 0 20px;
      padding: 4px 8px;
      border-radius: 3px;
      border-color: #b4b4b4;
    }

    label.early-access {
      font-size: 12px;
      color: black;
      background-color: #7ece1b;
      padding: 2px 3px;
      border-radius: 4px;
      margin-left: .5rem;
    }
  </style>

  <style>
    {{{ data.css }}}
  </style>
</head>

<body>
  <!-- we provide is specification here -->
  <div id="redoc_container"></div>
  <script src="https://cdn.jsdelivr.net/npm/redoc@{{data.redocVersion}}/bundles/redoc.standalone.js"> </script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/redoc-try-it-out/dist/try-it-out.min.js"></script>
  <script>
    function waitForElm(selector) {
      return new Promise(resolve => {
          if (document.querySelector(selector)) {
              return resolve(document.querySelector(selector));
          }

          const observer = new MutationObserver(mutations => {
              if (document.querySelector(selector)) {
                  observer.disconnect();
                  resolve(document.querySelector(selector));
              }
          });

          observer.observe(document.body, {
              childList: true,
              subtree: true
          });
      });
    }

    let themeJSON = '{{{ toJSON data.theme }}}';
    if (themeJSON === '') { themeJSON = undefined }

    RedocTryItOut.init(
      '{{ data.docUrl }}'.replace('swagger.json', 'swagger-legacy.json'),
      {
        ...JSON.parse('{{{ toJSON data.options }}}'),
        ...(themeJSON && {
          theme: {
            ...JSON.parse(themeJSON)
          }
        })
      },
      document.getElementById("redoc_container")
    );

    const versions = '{{{ toJSON data.apiVersions }}}';
    const versionList = JSON.parse(versions === '' ? [] : versions);

    // Version selector
    waitForElm('div[role="search"]').then(searchBar => {
      if (versionList.length > 0) {
        const selector = document.createElement('select');
        selector.id = 'version-selector';

        versionList.forEach((version, index) => {
          const versionOption = document.createElement('option');
          versionOption.value = version.name;
          versionOption.selected = version.active ? 'selected' : '';

          if (versionList.length - 1 === index) {
            versionOption.innerText = `${version.name} - latest`;
          } else {
            versionOption.innerText = version.name;
          }

          selector.appendChild(versionOption);
        })

        selector.onchange = function() {
          const activeItem = versionList.find(x => x.name === this.value);
          document.location.href = activeItem?.href;
        }

        searchBar.parentNode.insertBefore(selector, searchBar);
      }
    })

    waitForElm('ul[role="navigation"]').then(() => {
      // Apply tag versions
      fetch('{{ data.docUrl }}').then(x => x.json()).then(swagger => {

        // Tag Groups
        const tags = swagger.tags;
        const earlyAccessTags = tags.filter(x => x['x-earlyAccess']).map(x => x.name);

        console.debug(earlyAccessTags);

        const createEarlyAccessLabel = () => {
          const label = document.createElement('label');
          label.innerText = 'Early Access';
          label.classList.add('early-access');
          return label;
        }

        const tagElements = earlyAccessTags.map(tag => document.querySelector(`li[data-item-id="tag/${tag.replaceAll(' ', '-').replaceAll('/','')}"]`));

        tagElements.forEach(function (tag) {
          if (!tag) return;
          const textSpan = tag.querySelector('label span[title]');
          textSpan.appendChild(createEarlyAccessLabel());
        });

        // Endpoints
        const routesWithEarlyAccess = [];
        Object.values(swagger.paths).forEach(x => Object.values(x).forEach(y => {
          if (y['x-earlyAccess'] === true) {
            routesWithEarlyAccess.push({
              operationId: y.operationId,
              tag: y.tags[0]
            })
          }
        }));

        const routeElements = routesWithEarlyAccess.map(route => document.querySelector(`li[data-item-id="tag/${route.tag}"] ul li[data-item-id="operation/${route.operationId}"]`));

        routeElements.forEach(function (tag) {
          const textSpan = tag.querySelector('label span:nth-child(2)');
          textSpan.appendChild(createEarlyAccessLabel());
        });
      });
    })

    // Fix nav items names
    waitForElm('ul[role="navigation"]').then(() => {
      const navItems = document.querySelectorAll('ul[role="navigation"] li li label span, div.api-content h2');
      navItems.forEach(item => {
        item.innerHTML = item.innerHTML.replace(/[^/><]+\/([^/]+$)/, '$1');
      });
    })

    // Replace links with in api-info with target="_blank"
    waitForElm('div.api-info').then(apiInfo => {
      apiInfo.querySelectorAll('a').forEach(el => {
        el.target = '_blank';
      });
    });

    waitForElm('a[download]').then(downloadButton => {
      downloadButton.href = downloadButton.href.replace('-legacy.json', '.json');
    })

    waitForElm('.menu-content').then(menu => {
      const banner = document.createElement('div');
      banner.style.background = '#fafafa';
      banner.style.height = '1rem';
      banner.style.display = 'block';

      menu.insertBefore(banner, menu.firstChild);
    })
  </script>
</body>

</html>
